{"source_files":[{"name":"coconuts/static/coconuts/js/coconuts.js","source":"var app = angular.module('coconuts', ['ngAnimate', 'ngResource', 'ngRoute', 'ngTouch']).\nconfig(['$httpProvider', '$routeProvider', function($httpProvider, $routeProvider) {\n    // handle django's CSRF\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n    $routeProvider.\n        when(':path*', {\n            templateUrl: '/folder.html',\n            controller: 'FolderCtrl'\n        }).\n        otherwise({redirectTo: '/'});\n}]).\ncontroller('CrumbCtrl', ['$location', '$rootScope', '$scope', 'settings', function($location, $rootScope, $scope, settings) {\n    $scope.crumbs = [];\n    $scope.settings = settings;\n\n    $scope.show = function(crumb) {\n        $rootScope.transitionClass = 'slide-backward';\n        $location.path(crumb.path);\n    };\n\n    $scope.location = $location;\n    $scope.$watch('location.path()', function(path) {\n        if (path === '') path = '/';\n\n        // build crumbs\n        var crumbs = [];\n        var crumbPath = '/';\n        var bits = path.split('/');\n        crumbs.push({name: 'Home', path: crumbPath});\n        for (var i = 1; i < bits.length - 1; i++) {\n            crumbPath += bits[i] + '/';\n            crumbs.push({name: bits[i], path: crumbPath});\n        }\n        if (bits[bits.length-1]) {\n            crumbPath += bits[bits.length-1];\n            crumbs.push({name: bits[bits.length-1], path: crumbPath});\n        }\n\n        // replace crumbs\n        for (i = 0; i < crumbs.length; i++) {\n            if (i >= $scope.crumbs.length || $scope.crumbs[i].path != crumbs[i].path) {\n                $scope.crumbs[i] = crumbs[i];\n            }\n        }\n        $scope.crumbs.splice(crumbs.length, $scope.crumbs.length - crumbs.length);\n    });\n\n    $scope.toggleFullScreen = function() {\n        if (!document.fullscreenElement &&    // alternative standard method\n            !document.mozFullScreenElement && !document.webkitFullscreenElement) {  // current working methods\n            if (document.documentElement.requestFullscreen) {\n                document.documentElement.requestFullscreen();\n            } else if (document.documentElement.mozRequestFullScreen) {\n                document.documentElement.mozRequestFullScreen();\n            } else if (document.documentElement.webkitRequestFullscreen) {\n                document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        } else {\n            if (document.cancelFullScreen) {\n                document.cancelFullScreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n            }\n        }\n    };\n\n    $scope.toggleInformation = function() {\n        $('body').toggleClass('photo-info-visible');\n    };\n}]).\ncontroller('FolderCtrl', ['$http', '$location', '$rootScope', '$routeParams', '$scope', '$timeout', 'Folder', 'FormData', 'settings', function($http, $location, $rootScope, $routeParams, $scope, $timeout, Folder, FormData, settings) {\n    $scope.settings = settings;\n\n    // fetch folder contents\n    var idx = $routeParams.path.lastIndexOf('/');\n    var dirPath = $routeParams.path.slice(0, idx + 1);\n    $scope.currentFolder = Folder.get(dirPath);\n    $scope.$watch('currentFolder', function() {\n        var photos = $scope.currentFolder.files.filter(function(x) {\n            return x.image !== undefined || x.video !== undefined;\n        });\n        $scope.showThumbnails = (photos.length == $scope.currentFolder.files.length);\n        for (var i = 0; i < photos.length; i++) {\n            if (photos[i].path === $routeParams.path) {\n                $scope.previousPhoto = photos[i-1];\n                $scope.currentPhoto = photos[i];\n                $scope.nextPhoto = photos[i+1];\n                return;\n            }\n        }\n        $scope.previousPhoto = undefined;\n        $scope.currentPhoto = undefined;\n        $scope.nextPhoto = undefined;\n    }, true);\n\n    $scope.show = function(photo) {\n        if (photo && !$rootScope.transitionClass) {\n            $rootScope.transitionClass = 'slide-forward';\n            $location.path(photo.path);\n        }\n    };\n\n    $scope.showNext = function() {\n        if ($scope.nextPhoto && !$rootScope.transitionClass) {\n            $rootScope.transitionClass = 'slide-forward';\n            $location.path($scope.nextPhoto.path);\n            $location.replace();\n        }\n    };\n\n    $scope.showPrevious = function() {\n        if ($scope.previousPhoto && !$rootScope.transitionClass) {\n            $rootScope.transitionClass = 'slide-backward';\n            $location.path($scope.previousPhoto.path);\n            $location.replace();\n        }\n    };\n\n    $scope.doAdd = function() {\n        var formData = new FormData();\n        formData.append('upload', $scope.addFile);\n        $http.post(settings.coconuts_root + 'add_file' + $scope.currentFolder.path, formData, {\n            headers: { 'Content-Type': undefined },\n            transformRequest: function(data) { return data; }\n        }).success(function(currentFolder) {\n            $scope.addPrompt = false;\n            angular.copy(currentFolder, $scope.currentFolder);\n        });\n    };\n\n    $scope.doCreate = function() {\n        var formData = new FormData();\n        formData.append('name', $scope.createName);\n        $http.post(settings.coconuts_root + 'add_folder' + $scope.currentFolder.path, formData, {\n            headers: { 'Content-Type': undefined },\n            transformRequest: function(data) { return data; }\n        }).success(function(currentFolder) {\n            $scope.createPrompt = false;\n            angular.copy(currentFolder, $scope.currentFolder);\n        });\n    };\n\n    $scope.promptDelete = function(obj) {\n        $scope.deleteTarget = obj;\n        $scope.deleteFolder = false;\n    };\n    $scope.doDelete = function() {\n        $http.post(settings.coconuts_root + 'delete' + $scope.deleteTarget.path).success(function(currentFolder) {\n            $scope.deleteTarget = undefined;\n            angular.copy(currentFolder, $scope.currentFolder);\n            $location.path(currentFolder.path);\n        });\n    };\n\n    $scope.promptManage = function() {\n        $scope.managePrompt = true;\n        $http.get(settings.coconuts_root + 'permissions' + $scope.currentFolder.path).success(function(data) {\n            $scope.description = data.description;\n            $scope.permissions = data.permissions;\n            $scope.owners = data.owners;\n        });\n    };\n    $scope.doManage = function() {\n        $http.post(settings.coconuts_root + 'permissions' + $scope.currentFolder.path, {\n            description: $scope.description,\n            permissions: $scope.permissions\n        }).success(function(data) {\n            $scope.managePrompt = false;\n        });\n    };\n\n    // keyboard navigation\n    function handleKeypress(evt) {\n        switch (evt.keyCode) {\n        case 32:\n        case 39:\n            $scope.$apply(function() {\n                $scope.showNext();\n            });\n            break;\n        case 37:\n            $scope.$apply(function() {\n                $scope.showPrevious();\n            });\n            break;\n        }\n    }\n    angular.element(document).bind('keydown', handleKeypress);\n    $scope.$on('$destroy', function() {\n        angular.element(document).unbind('keydown', handleKeypress);\n    });\n\n    // clear the transition once it is finished, so that we do not re-play\n    // it if the user navigates with the browser's back or forward buttons\n    $timeout(function() {\n        $rootScope.transitionClass = undefined;\n    }, 600);\n}]).\ndirective('coFile', ['$parse', function($parse) {\n    return {\n        restrict: 'A',\n        link: function(scope, elm, attrs) {\n            var model = $parse(attrs.coFile);\n            elm.bind('change', function(evt) {\n                scope.$apply(function() {\n                    model.assign(scope, evt.target.files[0]);\n                });\n            });\n        }\n    };\n}]).\ndirective('coDisplay', ['settings', function(settings) {\n    return {\n        restrict: 'A',\n        template: '<img ng-src=\"{{ file | fileRender }}\" ng-if=\"file.image\">' +\n                  '<video controls ng-if=\"file.video\">' +\n                  '<source ng-src=\"{{ file | fileDownload }}\" type=\"video/mp4\"></source>' +\n                  '</video>',\n        scope: {\n            file: '=coDisplay'\n        }\n    };\n}]).\ndirective('coThumbnail', ['$window', function($window) {\n    return {\n        restrict: 'A',\n        template: '<img class=\"thumb\" ng-src=\"{{ file | fileRender:resolution }}\" ng-if=\"file.image !== undefined || file.video !== undefined\"/>' +\n                  '<img class=\"icon\" ng-src=\"{{ file.mimetype | fileIcon }}\" ng-if=\"file.image === undefined\">',\n        scope: {\n            file: '=coThumbnail'\n        },\n        link: function(scope, elm, attrs) {\n            if (angular.isNumber($window.devicePixelRatio) && $window.devicePixelRatio > 1) {\n                scope.resolution = 256;\n            } else {\n                scope.resolution = 128;\n            }\n        }\n    };\n}]).\nfactory('Folder', ['$cacheFactory', '$http', 'settings', function($cacheFactory, $http, settings) {\n    var cache = $cacheFactory('Folder');\n    var Folder = function() {\n        this.files = [];\n        this.folders = [];\n    };\n    Folder.get = function(dirPath) {\n        var folder = cache.get(dirPath);\n        if (folder === undefined) {\n            folder = new Folder();\n            $http.get(settings.coconuts_root + 'contents' + dirPath).success(function(data) {\n                angular.copy(data, folder);\n                cache.put(dirPath, folder);\n            });\n        }\n        return folder;\n    };\n    return Folder;\n}]).\nfactory('FormData', [function() {\n    return FormData;\n}]).\nfactory('settings', ['$http', '$rootScope', function($http, $rootScope) {\n    function getDisplayHeight() {\n        var foot = $('body').hasClass('photo-info-visible') ? 96 : 0;\n        return $(window).height() - 32 - foot;\n    }\n    function getImageSize() {\n        var screenSize = Math.max($(window).width(), $(window).height());\n        var sizes = [800, 1024, 1280, 1600];\n        for (var i = 0; i < sizes.length; i++) {\n            if (screenSize <= sizes[i]) {\n                return sizes[i];\n            }\n        }\n        return sizes[sizes.length - 1];\n    }\n\n    var settings = {\n        coconuts_root: 'images/',\n        display_height: getDisplayHeight(),\n        image_size: getImageSize(),\n        toggleInformation: function() {\n            $('body').toggleClass('photo-info-visible');\n            settings.display_height = getDisplayHeight();\n            settings.image_size = getImageSize();\n        }\n    };\n    $(window).resize(function() {\n        var newHeight = getDisplayHeight();\n        var newSize = getImageSize();\n        if (newHeight != settings.display_height || newSize !== settings.image_size) {\n            $rootScope.$apply(function() {\n                settings.display_height = newHeight;\n                settings.image_size = newSize;\n            });\n        }\n    });\n    return settings;\n}]).\nfilter('fileIcon', ['settings', function(settings) {\n    var mime_root = '/static/coconuts/img/';\n    return function(mimetype) {\n        if (mimetype.indexOf('image/') === 0) {\n            return mime_root + 'image-x-generic.png';\n        } else if (mimetype === 'inode/directory') {\n            return mime_root + 'inode-directory.png';\n        } else if (mimetype === 'application/pdf') {\n            return mime_root + 'application-pdf.png';\n        } else if (mimetype === 'application/zip') {\n            return mime_root + 'application-zip.png';\n        } else if (mimetype.indexOf('text/') === 0) {\n            return mime_root + 'text-x-generic.png';\n        } else if (mimetype.indexOf('video/') === 0) {\n            return mime_root + 'video-x-generic.png';\n        } else {\n            return mime_root + 'unknown.png';\n        }\n    };\n}]).\nfilter('fileSize', [function() {\n    var GiB = 1024 * 1024 * 1024,\n        MiB = 1024 * 1024,\n        KiB = 1024;\n    return function(val) {\n        if (val >= GiB) {\n            return (val / GiB).toFixed(1) + ' GiB';\n        } else if (val >= MiB) {\n            return (val / MiB).toFixed(1) + ' MiB';\n        } else if (val >= KiB) {\n            return (val / KiB).toFixed(1) + ' kiB';\n        } else {\n            return val + ' B';\n        }\n    };\n}]).\nfilter('fileDownload', ['settings', function(settings) {\n    return function(file) {\n        return settings.coconuts_root + 'download' + file.path;\n    };\n}]).\nfilter('fileRender', ['settings', function(settings) {\n    return function(file, size) {\n        if (size === undefined) {\n            size = settings.image_size;\n        }\n        return settings.coconuts_root + 'render' + file.path + '?size=' + size;\n    };\n}]);\n","coverage":[1,null,null,36,36,null,36,null,null,null,null,null,null,null,6,6,null,6,1,1,null,null,6,6,7,null,null,7,7,7,7,7,6,6,null,7,4,4,null,null,null,7,17,16,null,null,7,null,null,6,0,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,null,null,null,6,0,null,null,null,11,null,null,11,11,11,11,24,10,null,24,24,6,3,3,3,3,null,null,21,21,21,null,null,11,1,1,1,null,null,null,11,2,1,1,1,null,null,null,11,2,1,1,1,null,null,null,11,1,1,1,null,1,null,1,1,null,null,null,11,1,1,1,null,1,null,1,1,null,null,null,11,1,1,null,11,1,1,1,1,null,null,null,11,1,1,1,1,1,null,null,11,1,null,null,null,1,null,null,null,null,1,0,null,null,0,0,null,0,null,0,0,null,0,null,null,11,11,0,null,null,null,null,11,2,null,null,null,1,null,null,1,1,1,1,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,4,0,null,4,null,null,null,null,null,12,12,12,12,null,12,13,13,12,12,12,12,null,null,13,null,12,null,null,1,null,null,1,30,30,null,1,30,30,30,30,30,null,null,0,null,null,30,null,null,null,null,0,0,0,null,null,30,0,0,0,0,0,0,null,null,null,30,null,null,10,10,16,4,12,1,11,1,10,1,9,4,5,2,null,3,null,null,null,null,4,null,null,4,7,1,6,2,4,2,null,2,null,null,null,null,0,0,null,null,null,6,8,1,null,8,null,null,null],"branches":[25,1,0,1,25,1,1,6,36,2,0,4,36,2,1,3,43,3,0,16,43,3,1,1,43,4,0,17,43,4,1,1,51,5,0,0,51,5,1,0,51,6,0,0,51,6,1,0,51,6,2,0,53,7,0,0,53,7,1,0,55,8,0,0,55,8,1,0,57,9,0,0,57,9,1,0,61,10,0,0,61,10,1,0,63,11,0,0,63,11,1,0,65,12,0,0,65,12,1,0,84,13,0,10,84,13,1,1,88,14,0,3,88,14,1,3,101,15,0,1,101,15,1,0,101,16,0,1,101,16,1,1,108,17,0,1,108,17,1,1,108,18,0,2,108,18,1,1,116,19,0,1,116,19,1,1,116,20,0,2,116,20,1,1,178,21,0,0,178,21,1,0,178,21,2,0,237,22,0,0,237,22,1,4,237,23,0,4,237,23,1,4,253,24,0,12,253,24,1,1,269,25,0,0,269,25,1,30,276,26,0,30,276,26,1,0,296,27,0,0,296,27,1,0,296,28,0,0,296,28,1,0,308,29,0,4,308,29,1,12,310,30,0,1,310,30,1,11,312,31,0,1,312,31,1,10,314,32,0,1,314,32,1,9,316,33,0,4,316,33,1,5,318,34,0,2,318,34,1,3,330,35,0,1,330,35,1,6,332,36,0,2,332,36,1,4,334,37,0,2,334,37,1,2,348,38,0,1,348,38,1,7]}],"git":{"head":{"id":"01af890b1cdb862b442ea0c6016eb81075b7150b","committer_name":"Eric Stavarache","committer_email":"ericptst@gmail.com","message":"Add registration API endpoint","author_name":"Eric Stavarache","author_email":"ericptst@gmail.com"},"branch":"master","remotes":[{"name":"origin","url":"git@github.com:ericpts/ProiectIP.git"}]},"run_at":"2018-05-02T12:03:40.903Z"}